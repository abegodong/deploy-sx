---
- name: Check required variables
  assert:
    that:
    - sx_cluster_name is defined
    - sx_nodes_group is defined and sx_nodes_group in groups
  run_once: true

- name: Check required per host variables
  assert:
    that:
    - sx_node_size is defined
  register: host_checks

- name: Ensure all cluster nodes passed the per-host checks
  assert:
    that:
    - not hostvars[item].host_checks.failed|default(False)
  with_items: "{{ groups[sx_nodes_group] }}"

- name: Check required variables for certificate setup (set sx_use_ssl=false to disable)
  assert:
    that:
    - cert_key_size is defined
    - cert_country_code is defined
    - cert_locality_name is defined
    - cert_organization_name is defined
    - cert_validity is defined
  when: sx_use_ssl
  run_once: true

- name: Choose initial cluster node
  set_fact:
    first_node_name: "{{ groups[sx_nodes_group][0] }}"
    is_first_node: "{{ inventory_hostname == groups[sx_nodes_group][0] }}"

- name: Show initial cluster node
  debug: var=first_node_name
  when: is_first_node|bool

- name: Get cluster UUID of a node
  shell: >
    {{ sx_sbin_path }}sxsetup --info | sed -n '-es/Cluster UUID: //p'
  register: sx_local_cluster_uuid
  changed_when: false

- name: Ensure that there are no cluster UUID mismatches
  fail: msg="Failure! Cluster UUIDs of '{{ item }}' and of the first host differ!"
  when: "{{ (hostvars[item].sx_local_cluster_uuid.stdout and hostvars[item].sx_local_cluster_uuid.stdout != hostvars[first_node_name].sx_local_cluster_uuid.stdout)|bool }}"
  run_once: true
  with_items: "{{ groups[sx_nodes_group] }}"

- name: Determine node IP addresses
  set_fact:
    sx_node_ip: "{{ ansible_default_ipv4.address }}"
  when:
    - ansible_default_ipv4.address is defined
    - sx_node_ip is not defined

- name: Check if node IP addresses were determined
  fail: msg="SX node IP address could not be determined. Please set sx_node_ip variable for the host."
  when: sx_node_ip is not defined

- name: Determine initial node IP address
  set_fact:
    sx_first_node_ip: "{{ hostvars[first_node_name]['sx_node_ip'] }}"

- name: Install Skylable SX from source
  include: from-source/install-sx.yml
  when: sx_build_from_source

- name: Install Skylable SX from a binary package
  include: from-package/install-sx.yml
  when: not sx_build_from_source

- name: Confirm existence of /var/lib/sxserver
  file:
    path: "{{ sx_lib_dir }}"
    state: directory

- include: ssl_cert.yml
  when: sx_use_ssl

- name: Create Skylable SX configuration template for first node
  template:
    src: sxsetup.initial.j2
    dest: "{{ sx_build_prefix }}/etc/sxserver/sxsetup.tmp"
  when: is_first_node|bool

- name: Start first node
  command: >
    {{ sx_sbin_path }}sxsetup --config-file {{ sx_build_prefix }}/etc/sxserver/sxsetup.tmp{% if sx_debug %} --debug{% endif %}
    creates={{ sx_build_prefix }}/etc/sxserver/sxsetup.conf
  when: is_first_node|bool

- name: Get cluster UUID
  shell: "{{ sx_sbin_path }}sxsetup --info | sed -n '-es/Cluster UUID: //p'"
  register: sx_cluster_uuid
  changed_when: false
  when: is_first_node|bool

- name: Get cluster key
  shell: "{{ sx_sbin_path }}sxsetup --info | sed -n '-es/Cluster key: //p'"
  register: sx_cluster_key
  changed_when: false
  when: is_first_node|bool

- name: Get admin key
  shell: "{{ sx_sbin_path }}sxsetup --info | sed -n '-es/Admin key: //p'"
  register: sx_admin_key
  changed_when: false
  when: is_first_node|bool

- name: Get node UUIDs
  shell: "{{ sx_sbin_path }}sxsetup --info | awk '$1 == \"*\" { print $2 }'"
  changed_when: false
  register: sx_node_uuid

- name: Initialize admin profile on the first node
  shell: >
    {{ sx_sbin_path }}sxsetup --info | sed -n '-es/Admin key: //p' | {{ sx_bin_path }}sxinit --key --batch-mode --force-reinit --port={{ sx_port }} {% if not sx_use_ssl %}--no-ssl {% endif %}--auth-file - --host-list={{ sx_node_ip }} {% if sx_debug %}--debug {% endif %}"sx://admin@{{ sx_cluster_name }}"
    creates="{{ sx_cache_dir }}/{{ sx_cluster_name }}/auth/admin"
  when: is_first_node|bool

- name: Set cluster member description
  set_fact:
    sx_node_desc: "{{ sx_node_size }}/{{ sx_node_ip }}/{{ sx_node_internal_ip|default('') }}{% if sx_node_uuid.stdout %}/{{ sx_node_uuid.stdout }}{% endif %}"

- name: Create Skylable SX configuration template for remaining nodes
  template:
    src: sxsetup.tmp.j2
    dest: "{{ sx_build_prefix }}/etc/sxserver/sxsetup.tmp"
  when: not is_first_node|bool

- name: Start remaining nodes
  command: >
    {{ sx_sbin_path }}sxsetup --bare --config-file {{ sx_build_prefix }}/etc/sxserver/sxsetup.tmp{% if sx_debug %} --debug{% endif %}
    creates={{ sx_build_prefix }}/etc/sxserver/sxsetup.conf
  when: not is_first_node|bool

- name: Configure cluster
  command:
    "{{ sx_sbin_path }}sxadm cluster {% if sx_debug %}--debug {% endif %}-b -M {% for sx_node in groups[sx_nodes_group] %}{{ hostvars[sx_node].sx_node_desc }} {% endfor %}sx://admin@{{ sx_cluster_name }}"
  when: is_first_node|bool

- name: Initialize admin profile on remaining nodes
  shell: >
    {{ sx_sbin_path }}sxsetup --info | sed -n '-es/Admin key: //p' | {{ sx_bin_path }}sxinit --key --batch-mode --force-reinit --port={{ sx_port }} {% if not sx_use_ssl %}--no-ssl {% endif %}--auth-file - --host-list={{ sx_first_node_ip }} {% if sx_debug %}--debug {% endif %}"sx://admin@{{ sx_cluster_name }}"
    creates="{{ sx_cache_dir }}/{{ sx_cluster_name }}/auth/admin"
  when: not is_first_node|bool

- name: print admin key
  debug: var=sx_admin_key.stdout
  when: is_first_node|bool

- name: breadcrumb
  debug: msg="Cluster installed. Now run sxinit --force-reinit --key {% if not sx_use_ssl %}--no-ssl {% endif %}-l {{ sx_first_node_ip }} --port={{ sx_port }} sx://admin@{{ sx_cluster_name }}"
  when: is_first_node|bool
